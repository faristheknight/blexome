import 'package:flutter/material.dart';
import 'row_function.dart';

class TableContainer extends StatefulWidget {
  @override
  _TableContainerState createState() => _TableContainerState();
}

class _TableContainerState extends State<TableContainer> {
  List<Map<String, String>> rows = [];
  String currentName = '';
  String currentId = '';
  String currentQuantity = '';
  String currentSellingPrice = '';

  final TextEditingController nameController = TextEditingController();
  final TextEditingController idController = TextEditingController();
  final TextEditingController quantityController = TextEditingController();
  final TextEditingController sellingPriceController = TextEditingController();

  void addRow(String name, String id, String quantity, String sellingPrice) {
    if (id.isEmpty) {
      // Show an error message if the ID is empty
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('ID cannot be empty')),
      );
      return;
    }

    setState(() {
      var existingRow = rows.firstWhere((row) => row['id'] == id, orElse: () => {});
      if (existingRow.isNotEmpty) {
        // Increment the quantity of the existing row
        int incrementQuantity = quantity.isEmpty ? 1 : int.parse(quantity);
        int newQuantity = int.parse(existingRow['quantity']!) + incrementQuantity;
        existingRow['quantity'] = newQuantity.toString();
        existingRow['selling_price'] = sellingPrice.isEmpty ? existingRow['selling_price']! : sellingPrice;
      } else {
        // Add a new row with quantity default to 1 if empty
        rows.add({
          'name': name,
          'id': id,
          'quantity': quantity.isEmpty ? '1' : quantity,
          'selling_price': sellingPrice.isEmpty ? '0' : sellingPrice
        });
      }
    });

    // Clear the input fields and current variables after adding a row
    nameController.clear();
    idController.clear();
    quantityController.clear();
    sellingPriceController.clear();
    currentName = '';
    currentId = '';
    currentQuantity = '';
    currentSellingPrice = '';
  }

  void updateRow(String id) {
    var row = rows.firstWhere((row) => row['id'] == id, orElse: () => {});
    if (row.isNotEmpty) {
      setState(() {
        nameController.text = row['name']!;
        idController.text = row['id']!;
        quantityController.text = row['quantity']!;
        sellingPriceController.text = row['selling_price']!;
        rows.removeWhere((row) => row['id'] == id);
        currentName = row['name']!;
        currentId = row['id']!;
        currentQuantity = row['quantity']!;
        currentSellingPrice = row['selling_price']!;
      });
    }
  }

  void deleteRow(String id) {
    setState(() {
      rows.removeWhere((row) => row['id'] == id);
    });
  }

  void gatherRows() {
    // This function gathers all rows data and prints it to the console
    // You can replace this with your API call to pass the data to your Python Flask API
    print(rows);
  }

  double calculateTotal() {
    double total = 0.0;
    for (var row in rows) {
      int quantity = int.parse(row['quantity']!);
      double sellingPrice = double.parse(row['selling_price']!);
      total += quantity * sellingPrice;
    }
    return total;
  }

  @override
  void dispose() {
    nameController.dispose();
    idController.dispose();
    quantityController.dispose();
    sellingPriceController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Table Container'),
      ),
      body: Column(

        children: [
          
          TextField(
            controller: nameController,
            onChanged: (value) => currentName = value,
            decoration: InputDecoration(labelText: 'Name'),
          ),
          TextField(
            controller: idController,
            onChanged: (value) => currentId = value,
            decoration: InputDecoration(labelText: 'ID'),
          ),
          TextField(
            controller: quantityController,
            onChanged: (value) => currentQuantity = value,
            decoration: InputDecoration(labelText: 'Quantity'),
          ),
          TextField(
            controller: sellingPriceController,
            onChanged: (value) => currentSellingPrice = value,
            decoration: InputDecoration(labelText: 'Selling Price'),
          ),
          ElevatedButton(
            onPressed: () {
              addRow(currentName, currentId, quantityController.text, currentSellingPrice);
            },
            child: Text('Add Row'),
          ),
          Expanded(
            child: ListView(
              children: rows
                  .map(
                    (row) => TableRowWidget(
                      name: row['name']!,
                      id: row['id']!,
                      quantity: row['quantity']!,
                      sellingPrice: row['selling_price']!,
                      onUpdate: updateRow,
                      onDelete: deleteRow,
                    ),
                  )
                  .toList(),
            ),
          ),
          if (rows.isNotEmpty)
            Column(
              children: [
                ElevatedButton(
                  onPressed: gatherRows,
                  child: Text('Gather Rows'),
                ),
                SizedBox(height: 20), // Add some space
                Text(
                  'Total: PKR ${calculateTotal().toStringAsFixed(2)}',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                SizedBox(height:30),
              ],
            ),
        ],
      ),
    );
  }
}
